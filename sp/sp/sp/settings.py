"""
Django settings for sp project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from urllib.parse import urlparse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-4sgw@-8gxj$tfku@9ztp!+c!ixrt0)(-gl9ofzihncgd!ppzif'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# Base URLs can be swapped via environment variables
#   SP:  SP1_BASE_URL (default https://istiaque.me)
#   IdP: IDP_BASE_URL (default https://idp.asiradnan.com)
BASE_URL = os.environ.get('SP1_BASE_URL', 'https://istiaque.me').rstrip('/')
IDP_BASE_URL = os.environ.get('IDP_BASE_URL', 'https://idp.asiradnan.com').rstrip('/')

# Derive allowed host from BASE_URL plus local dev hosts
_parsed = urlparse(BASE_URL)
_derived_host = _parsed.netloc
ALLOWED_HOSTS = [_derived_host, 'localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'djangosaml2',
    'sp_app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'djangosaml2.middleware.SamlSessionMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sp.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# SAML2 Configuration
import saml2
from saml2.saml import NAMEID_FORMAT_EMAILADDRESS, NAMEID_FORMAT_UNSPECIFIED
from saml2.sigver import get_xmlsec_binary

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'djangosaml2.backends.Saml2Backend',
]

# SAML2 SP Configuration
SAML_ATTRIBUTE_MAPPING = {
    'uid': ('username', ),
    'mail': ('email', ),
    'cn': ('first_name', ),
    'sn': ('last_name', ),
    # Alternative mappings in case IdP sends different attribute names
    'username': ('username', ),
    'email': ('email', ),
    'first_name': ('first_name', ),
    'last_name': ('last_name', ),
}

# Make uid attribute optional for debugging
SAML_CREATE_UNKNOWN_USER = True
SAML_USE_NAME_ID_AS_USERNAME = True  # Use NameID as username when attributes are missing

IS_HTTPS = BASE_URL.startswith('https://')
LOGIN_URL = '/saml2/login/'
LOGIN_REDIRECT_URL = '/'

# Session configuration for SAML
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_COOKIE_SECURE = IS_HTTPS  # Enable for HTTPS production
SESSION_COOKIE_HTTPONLY = True
SESSION_SAVE_EVERY_REQUEST = True

# Security settings toggle based on scheme
SECURE_SSL_REDIRECT = IS_HTTPS
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https') if IS_HTTPS else None
SECURE_HSTS_SECONDS = 31536000 if IS_HTTPS else 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = IS_HTTPS
SECURE_HSTS_PRELOAD = IS_HTTPS

SECURE_CONTENT_TYPE_NOSNIFF = True if IS_HTTPS else False
SECURE_BROWSER_XSS_FILTER = True if IS_HTTPS else False
X_FRAME_OPTIONS = 'DENY' if IS_HTTPS else 'SAMEORIGIN'
CSRF_COOKIE_SECURE = IS_HTTPS

SAML_CONFIG = {
    # full path to the xmlsec1 binary program
    'xmlsec_binary': get_xmlsec_binary(['/opt/local/bin', '/usr/bin/xmlsec1']),

    # your entity id, usually your subdomain plus the url to the metadata view
    'entityid': f'{BASE_URL}/saml2/metadata/',

    # directory with attribute mapping
    'attribute_map_dir': str(BASE_DIR / 'attribute_maps'),

    # this block states what services we provide
    'service': {
        # we are just a lonely SP
        'sp': {
            'name': 'Django SP',
            'name_id_format': [NAMEID_FORMAT_EMAILADDRESS, NAMEID_FORMAT_UNSPECIFIED],
            'endpoints': {
                # url and binding to the assertion consumer service view
                # do not change the binding or service name
                'assertion_consumer_service': [
                    (f'{BASE_URL}/saml2/acs/', saml2.BINDING_HTTP_POST),
                ],
                # url and binding to the single logout service view
                # do not change the binding or service name
                'single_logout_service': [
                    (f'{BASE_URL}/saml2/ls/', saml2.BINDING_HTTP_REDIRECT),
                    (f'{BASE_URL}/saml2/ls/post/', saml2.BINDING_HTTP_POST),
                ],
            },

            # attributes that this project needs to identify a user
            'required_attributes': [],  # Temporarily remove required attributes for debugging

            # attributes that may be useful to have but not required
            'optional_attributes': ['uid', 'mail', 'cn', 'sn', 'username', 'email', 'first_name', 'last_name'],

            # Enable request signing - THIS FIXES THE SIGNATURE ERROR
            'authn_requests_signed': False,  # Temporarily disable for debugging
            'logout_requests_signed': False,  # Temporarily disable for debugging
            'want_assertions_signed': False,  # Temporarily disable for testing
            'want_response_signed': False,    # Temporarily disable for testing
            'want_assertions_or_response_signed': False,  # Allow unsigned responses
            'allow_unsolicited': True,  # Allow unsolicited responses for testing

            # in this section the list of IdPs we talk to are defined
            'idp': {
                # we do not need a WAYF service since there is
                # only an IdP defined here. This IdP should be
                # present in our metadata

                # the keys of this dictionary are entity ids
                IDP_BASE_URL + '/metadata': {
                    'single_sign_on_service': {
                        saml2.BINDING_HTTP_REDIRECT: IDP_BASE_URL + '/idp/sso/redirect/',
                        saml2.BINDING_HTTP_POST: IDP_BASE_URL + '/idp/sso/post/',
                    },
                    'single_logout_service': {
                        saml2.BINDING_HTTP_REDIRECT: IDP_BASE_URL + '/idp/slo/redirect/',
                        saml2.BINDING_HTTP_POST: IDP_BASE_URL + '/idp/slo/post/',
                    },
                },
            },
        },
    },

    # where the remote metadata is stored (follow configured IdP base URL)
    'metadata': {
        'remote': [
            {'url': IDP_BASE_URL + '/idp/metadata/'},
        ],
    },

    # set to 1 to output debugging information
    'debug': 1,  # Enable debug for troubleshooting

    # Signing - SP's own certificates for signing outgoing requests
    'key_file': str(BASE_DIR / 'certificates/sp_private.key'),  # private part
    'cert_file': str(BASE_DIR / 'certificates/sp_public.cert'),  # public part

    # Encryption
    'encryption_keypairs': [{
        'key_file': str(BASE_DIR / 'certificates/sp_private.key'),  # private part
        'cert_file': str(BASE_DIR / 'certificates/sp_public.cert'),  # public part
    }],

    # own metadata settings
    'contact_person': [
        {
            'given_name': 'Admin',
            'sur_name': 'User',
            'company': 'Example SP',
            'email_address': 'admin@example.com',
            'contact_type': 'technical',
        },
    ],
    # you can set multilanguage information here
    'organization': {
        'name': [('Istiaque.me SP', 'en')],
        'display_name': [('Istiaque.me Service Provider', 'en')],
        'url': [('https://istiaque.me', 'en')],
    },
    'valid_for': 24,  # how long is our metadata valid
}

# Disable CSP warning for development
SAML_CSP_HANDLER = ''
