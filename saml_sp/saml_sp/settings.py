"""
Django settings for saml_sp project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from saml2 import BINDING_HTTP_POST, BINDING_HTTP_REDIRECT


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


metadata_path = os.path.join(BASE_DIR, 'metadata.xml')
print("SAML metadata path:", metadata_path)
print("File exists:", os.path.exists(metadata_path))
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-wz6!efywc%i=zz4q%&ijpqj0b@e=%(g4f0i-(-y@=5$k!a!7s0'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'djangosaml2',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  
]
MIDDLEWARE.append('djangosaml2.middleware.SamlSessionMiddleware')

ROOT_URLCONF = 'saml_sp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'saml_sp.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# SAML2 Configuration
import saml2
from saml2.saml import NAMEID_FORMAT_PERSISTENT

# SAML2 Settings
SAML_CONFIG = {
    'xmlsec_binary': '/usr/bin/xmlsec1',

    # SP metadata URL (where SP metadata is served)
    'entityid': 'http://localhost:8000/saml2/metadata/',

    'attribute_map_dir': os.path.join(BASE_DIR, 'attribute_maps'),

    'metadata': {
        # If you have IdP metadata locally, keep this
        'local': [os.path.join(BASE_DIR, 'metadata.xml')],
    },

    'service': {
        'sp': {
            'name': 'Django SAML SP',
            'name_id_format': NAMEID_FORMAT_PERSISTENT,
            'endpoints': {
                'assertion_consumer_service': [
                    ('http://localhost:8000/saml2/acs/', saml2.BINDING_HTTP_POST),
                ],
                'single_logout_service': [
                    ('http://localhost:8000/saml2/sls/', saml2.BINDING_HTTP_REDIRECT),
                    ('http://localhost:8000/saml2/sls/', saml2.BINDING_HTTP_POST),
                ],
            },
            'required_attributes': ['uid', 'mail'],
            'optional_attributes': ['eduPersonAffiliation'],

            # IdP configuration: URLs on port 8001 (IdP host)
            'idp': {
                'http://localhost:8001/idp/metadata/': {
                    'single_sign_on_service': {
                        saml2.BINDING_HTTP_REDIRECT: 'http://localhost:8001/idp/sso/redirect/',
                        saml2.BINDING_HTTP_POST: 'http://localhost:8001/idp/sso/post/',
                    },
                    'single_logout_service': {
                        saml2.BINDING_HTTP_POST: 'http://localhost:8001/idp/slo/post/',
                    },
                },
            },
        },
    },

    'key_file': os.path.join(BASE_DIR, 'certificates', 'sp_private_key.pem'),
    'cert_file': os.path.join(BASE_DIR, 'certificates', 'sp_certificate.pem'),
    'encryption_keypairs': [{
        'key_file': os.path.join(BASE_DIR, 'certificates', 'sp_private_key.pem'),
        'cert_file': os.path.join(BASE_DIR, 'certificates', 'sp_certificate.pem'),
    }],

    'valid_for': 24,
}


# SAML2 Authentication Backend
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'djangosaml2.backends.Saml2Backend',
]

# Login URLs
LOGIN_URL = '/saml2/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Session settings
SESSION_EXPIRE_AT_BROWSER_CLOSE = True