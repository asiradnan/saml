"""
Django settings for idp project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from urllib.parse import urlparse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-9o7ks5d+dyku@bx0o-tom)8+_68do^vs2*h8n%3cs)14-h%^=x'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# Base URL can be swapped via environment variable
# Examples:
#   Production: https://idp.asiradnan.com
#   Local: http://localhost:9000
BASE_URL = os.environ.get('IDP_BASE_URL', 'https://idp.asiradnan.com').rstrip('/')

# Derive allowed host from BASE_URL plus local dev hosts
_parsed = urlparse(BASE_URL)
_derived_host = _parsed.netloc
ALLOWED_HOSTS = [_derived_host, 'localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'djangosaml2idp',
    'idp_app',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'idp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'idp.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


import saml2
from saml2.saml import NAMEID_FORMAT_EMAILADDRESS, NAMEID_FORMAT_UNSPECIFIED
from saml2.sigver import get_xmlsec_binary

LOGIN_URL = '/login/'
IS_HTTPS = BASE_URL.startswith('https://')
SP1_BASE_URL = os.environ.get('SP1_BASE_URL', 'https://istiaque.me').rstrip('/')
SP2_BASE_URL = os.environ.get('SP2_BASE_URL', 'https://asiradnan.me').rstrip('/')

# Security settings toggle based on scheme
SECURE_SSL_REDIRECT = IS_HTTPS
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https') if IS_HTTPS else None
SECURE_HSTS_SECONDS = 31536000 if IS_HTTPS else 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = IS_HTTPS
SECURE_HSTS_PRELOAD = IS_HTTPS

SECURE_CONTENT_TYPE_NOSNIFF = True if IS_HTTPS else False
SECURE_BROWSER_XSS_FILTER = True if IS_HTTPS else False
X_FRAME_OPTIONS = 'DENY' if IS_HTTPS else 'SAMEORIGIN'
CSRF_COOKIE_SECURE = IS_HTTPS
SESSION_COOKIE_SECURE = IS_HTTPS

SAML_IDP_CONFIG = {
    'debug' : True,  # Enable debug for troubleshooting
    'xmlsec_binary': get_xmlsec_binary(['/opt/local/bin', '/usr/bin/xmlsec1']),
    'entityid': '%s/metadata' % BASE_URL,
    'description': 'Example IdP setup',

    'service': {
        'idp': {
            'name': 'Django localhost IdP',
            'endpoints': {
                'single_sign_on_service': [
                    (f'{BASE_URL}/idp/sso/post/', saml2.BINDING_HTTP_POST),
                    (f'{BASE_URL}/idp/sso/redirect/', saml2.BINDING_HTTP_REDIRECT),
                ],
                "single_logout_service": [
                    (f"{BASE_URL}/idp/slo/post/", saml2.BINDING_HTTP_POST),
                    (f"{BASE_URL}/idp/slo/redirect/", saml2.BINDING_HTTP_REDIRECT)
                ],
            },
            'name_id_format': [NAMEID_FORMAT_EMAILADDRESS, NAMEID_FORMAT_UNSPECIFIED],
            'sign_response': True,
            'sign_assertion': True,
            'want_authn_requests_signed': False,  # Temporarily disable for debugging
        },
    },

    # Signing
    'key_file': str(BASE_DIR / 'certificates/private.key'),
    'cert_file': str(BASE_DIR / 'certificates/public.cert'),
    # Encryption
    'encryption_keypairs': [{
        'key_file': str(BASE_DIR / 'certificates/private.key'),
        'cert_file': str(BASE_DIR / 'certificates/public.cert'),
    }],
    'valid_for': 365 * 24,
    
    # Note: We rely on DB-registered ServiceProvider records for trust.
    # Avoid remote metadata fetching here to prevent request stalls.
    # 'metadata': { ... }
}

# Additional SAML IdP Settings
SAML_IDP_SPCONFIG = {
    # Service Provider 1 - istiaque.me
    os.environ.get('SP1_BASE_URL', 'https://istiaque.me').rstrip('/') + '/saml2/metadata/': {
        'processor': 'idp_app.processors.CustomSAMLProcessor',
        'attribute_mapping': {
            'email': 'email',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'username': 'username',
            'is_staff': 'is_staff',
            'is_superuser': 'is_superuser',
        }
    },
    # Service Provider 2 - asiradnan.me
    os.environ.get('SP2_BASE_URL', 'https://asiradnan.me').rstrip('/') + '/saml2/metadata/': {
        'processor': 'idp_app.processors.CustomSAMLProcessor',
        'attribute_mapping': {
            'email': 'email',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'username': 'username',
            'is_staff': 'is_staff',
            'is_superuser': 'is_superuser',
        }
    }
}

# Login/Logout redirects
LOGIN_REDIRECT_URL = '/admin/'
LOGOUT_REDIRECT_URL = '/login/'